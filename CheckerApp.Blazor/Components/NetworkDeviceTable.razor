@inject IDialogService DialogService

<MudSimpleTable Elevation="3" FixedHeader="true" Bordered="true" Dense="true" Style="min-height:81%;">
    <thead>
        <tr>
            <th>Название</th>
            <th>IP</th>
            <th>MAC-адрес</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Value)
        {
            var index = Value.IndexOf(item);
            <tr>
                <td>@item.Name</td>
                <td>@item.IP</td>
                <td>@item.MacAddress</td>
                <td>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Filled.Edit" OnClick="() => Upsert(index)" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Filled.Delete" OnClick="() => Delete(index)" />
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudButton Class="mt-3"
           ButtonType="ButtonType.Button"
           Color="Color.Default"
           Variant="Variant.Filled"
           StartIcon="@Icons.Filled.AddLink"
           OnClick="()=> Upsert(-1)" FullWidth="true">Добавить сетевое устройство</MudButton>


@code{

    [Parameter] public IList<NetworkDeviceDto> Value { get; set; }
    [Parameter] public EventCallback<IList<NetworkDeviceDto>> ValueChanged { get; set; }

    
    private async Task Upsert(int index)
    {
        var device = index == -1 ? new NetworkDeviceDto() : Value.ElementAt(index);

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
        var parameters = new DialogParameters { { "NetworkDevice", device } };
        var dialog = DialogService.Show<NetworkDeviceUpsert>("Сетевое устройство", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var newDevice = (NetworkDeviceDto)result.Data;
            if (index == -1)
            {
                Value.Add(newDevice);
            }
            else
            {
                device.IP = newDevice.IP;
                device.Name = newDevice.Name;
                device.MacAddress = newDevice.MacAddress;
            }
        }
    }

    private void Delete(int index)
    {
        if (index == -1) return;

        var device = Value.ElementAt(index);

        Value.Remove(device);
    }
}